<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangdg.github.io/"/>
  <updated>2020-03-14T17:49:46.954Z</updated>
  <id>https://liangdg.github.io/</id>
  
  <author>
    <name>梁端刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13谈谈接口和抽象类有什么区别？[转]</title>
    <link href="https://liangdg.github.io/2020/03/15/Java%E6%A0%B8%E5%BF%8336%E8%AE%B213/"/>
    <id>https://liangdg.github.io/2020/03/15/Java核心36讲13/</id>
    <published>2020-03-14T17:04:14.000Z</published>
    <updated>2020-03-14T17:49:46.954Z</updated>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>12Java有几种文件拷贝方式？哪一种最高效？[转]</title>
    <link href="https://liangdg.github.io/2020/03/14/Java%E6%A0%B8%E5%BF%8336%E8%AE%B212/"/>
    <id>https://liangdg.github.io/2020/03/14/Java核心36讲12/</id>
    <published>2020-03-14T13:05:54.000Z</published>
    <updated>2020-03-14T17:03:22.555Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在专栏上一讲提到，NIO不止是多路复用，NIO 2也不只是异步IO，今天我们来看看Java IO体系中，其他不可忽略的部分。&lt;br&gt;今天我要问你的问题是，&lt;strong&gt;Java有几种文件拷贝方式？哪一种最高效？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="IO" scheme="https://liangdg.github.io/tags/IO/"/>
    
      <category term="NIO" scheme="https://liangdg.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>11Java提供了哪些IO方式？ NIO如何实现多路复用？[转]</title>
    <link href="https://liangdg.github.io/2020/03/13/Java%E6%A0%B8%E5%BF%8336%E8%AE%B211/"/>
    <id>https://liangdg.github.io/2020/03/13/Java核心36讲11/</id>
    <published>2020-03-12T23:53:36.000Z</published>
    <updated>2020-03-14T00:39:51.757Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;IO一直是软件开发中的核心部分之一，伴随着海量数据增长和分布式系统的发展，IO扩展能力愈发重要。幸运的是，Java平台IO机制经过不断完善，虽然在某些方面仍有不足，但已经在实践中证明了其构建高扩展性应用的能力。&lt;br&gt;今天我要问你的问题是，&lt;strong&gt;Java提供了哪些IO方式？ NIO如何实现多路复用？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="IO" scheme="https://liangdg.github.io/tags/IO/"/>
    
      <category term="NIO" scheme="https://liangdg.github.io/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>10如何保证集合是线程安全的? ConcurrentHashMap如何实现高效地线程安全？[转]</title>
    <link href="https://liangdg.github.io/2020/03/12/Java%E6%A0%B8%E5%BF%8336%E8%AE%B210/"/>
    <id>https://liangdg.github.io/2020/03/12/Java核心36讲10/</id>
    <published>2020-03-12T14:31:31.000Z</published>
    <updated>2020-03-12T15:12:12.179Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在之前两讲介绍了Java集合框架的典型容器类，它们绝大部分都不是线程安全的，仅有的线程安全实现，比如Vector、Stack，在性能方面也远不尽如人意。幸好Java语言提供了并发包（java.util.concurrent），为高度并发需求提供了更加全面的工具支持。&lt;/p&gt;
&lt;p&gt;今天我要问你的问题是，&lt;strong&gt;如何保证容器是线程安全的？ConcurrentHashMap如何实现高效地线程安全？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="Java集合" scheme="https://liangdg.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>09对比Hashtable、HashMap、TreeMap有什么不同？[转]</title>
    <link href="https://liangdg.github.io/2020/03/11/Java%E6%A0%B8%E5%BF%8336%E8%AE%B209/"/>
    <id>https://liangdg.github.io/2020/03/11/Java核心36讲09/</id>
    <published>2020-03-11T13:12:52.000Z</published>
    <updated>2020-03-12T14:32:18.386Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Map是广义Java集合框架中的另外一部分，HashMap作为框架中使用频率最高的类型之一，它本身以及相关类型自然也是面试考察的热点。&lt;br&gt;今天我要问你的问题是，&lt;strong&gt;对比Hashtable、HashMap、TreeMap有什么不同？谈谈你对HashMap的掌握。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="Java集合" scheme="https://liangdg.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>08对比Vector、ArrayList、LinkedList有何区别？[转]</title>
    <link href="https://liangdg.github.io/2020/03/10/Java%E6%A0%B8%E5%BF%8336%E8%AE%B208/"/>
    <id>https://liangdg.github.io/2020/03/10/Java核心36讲08/</id>
    <published>2020-03-10T12:21:29.000Z</published>
    <updated>2020-03-10T13:12:20.324Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们在日常的工作中，能够高效地管理和操作数据是非常重要的。由于每个编程语言支持的数据结构不尽相同，比如我最早学习的C语言，需要自己实现很多基础数据结构，管理和操作会比较麻烦。相比之下，Java则要方便的多，针对通用场景的需求，Java提供了强大的集合框架，大大提高了开发者的生产力。&lt;/p&gt;
&lt;p&gt;今天我要问你的是有关集合框架方面的问题，&lt;strong&gt;对比Vector、ArrayList、LinkedList有何区别？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="Java集合" scheme="https://liangdg.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>07int和Integer有什么区别？[转]</title>
    <link href="https://liangdg.github.io/2020/03/09/Java%E6%A0%B8%E5%BF%8336%E8%AE%B207/"/>
    <id>https://liangdg.github.io/2020/03/09/Java核心36讲07/</id>
    <published>2020-03-09T14:05:41.000Z</published>
    <updated>2020-03-09T14:43:23.568Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java虽然号称是面向对象的语言，但是原始数据类型仍然是重要的组成元素，所以在面试中，经常考察原始数据类型和包装类等Java语言特性。&lt;br&gt;今天我要问你的问题是，&lt;strong&gt;int和Integer有什么区别？谈谈Integer的值缓存范围&lt;/strong&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>06动态代理是基于什么原理？[转]</title>
    <link href="https://liangdg.github.io/2020/03/08/Java%E6%A0%B8%E5%BF%8336%E8%AE%B206/"/>
    <id>https://liangdg.github.io/2020/03/08/Java核心36讲06/</id>
    <published>2020-03-07T22:11:11.000Z</published>
    <updated>2020-03-07T22:53:27.175Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;编程语言通常有各种不同的分类角度，动态类型和静态类型就是其中一种分类角度，简单区分就是语言类型信息是在运行时检查，还是编译期检查。&lt;br&gt;与其近似的还有一个对比，就是所谓强类型和弱类型，就是不同类型变量赋值时，是否需要显式地（强制）进行类型转换。&lt;br&gt;那么，如何分类Java语言呢？通常认为，Java是静态的强类型语言，但是因为提供了类似反射等机制，也具备了部分动态类型语言的能力。&lt;br&gt;言归正传，今天我要问你的问题是&lt;strong&gt;，谈谈Java反射机制，动态代理是基于什么原理？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="动态代理" scheme="https://liangdg.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>02Exception和Error有什么区别[笔记]</title>
    <link href="https://liangdg.github.io/2020/03/07/Java%E6%A0%B8%E5%BF%8336%E8%AE%B202%E7%AC%94%E8%AE%B0/"/>
    <id>https://liangdg.github.io/2020/03/07/Java核心36讲02笔记/</id>
    <published>2020-03-06T19:48:25.000Z</published>
    <updated>2020-03-07T22:52:20.125Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;NoClassDefFoundError和ClassNotFoundException有什么区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Java核心36讲笔记" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="异常" scheme="https://liangdg.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>05String、StringBuffer、StringBuilder有什么区别？[转]</title>
    <link href="https://liangdg.github.io/2020/03/06/Java%E6%A0%B8%E5%BF%8336%E8%AE%B205/"/>
    <id>https://liangdg.github.io/2020/03/06/Java核心36讲05/</id>
    <published>2020-03-05T19:21:17.000Z</published>
    <updated>2020-03-06T19:40:33.198Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天我会聊聊日常使用的字符串，别看它似乎很简单，但其实字符串几乎在所有编程语言里都是个特殊的存在，因为不管是数量还是体积，字符串都是大多数应用中的重要组成。&lt;br&gt;今天我要问你的问题是，理解Java的字符串，&lt;strong&gt;String、StringBuffer、StringBuilder有什么区别？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>04强引用、软引用、弱引用、幻象引用有什么区别？[转]</title>
    <link href="https://liangdg.github.io/2020/03/05/Java%E6%A0%B8%E5%BF%8336%E8%AE%B204/"/>
    <id>https://liangdg.github.io/2020/03/05/Java核心36讲04/</id>
    <published>2020-03-05T08:59:40.000Z</published>
    <updated>2020-03-07T23:02:56.620Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Java语言中，除了原始数据类型的变量，其他所有都是所谓的引用类型，指向各种不同的对象，理解引用对于掌握Java对象生命周期和JVM内部相关机制非常有帮助。&lt;br&gt;今天我要问你的问题是，&lt;strong&gt;强引用、软引用、弱引用、幻象引用有什么区别？具体使用场景是什么？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="对象引用" scheme="https://liangdg.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>01谈谈你对Java平台的理解?[笔记]</title>
    <link href="https://liangdg.github.io/2020/03/04/Java%E6%A0%B8%E5%BF%8336%E8%AE%B201%E7%AC%94%E8%AE%B0/"/>
    <id>https://liangdg.github.io/2020/03/04/Java核心36讲01笔记/</id>
    <published>2020-03-04T15:17:01.000Z</published>
    <updated>2020-03-06T19:48:04.422Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;谈谈你对Java平台的理解？“Java是解释执行”，这句话正确吗？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="Java核心36讲笔记" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>03谈谈final、finally、 finalize有什么不同？[转]</title>
    <link href="https://liangdg.github.io/2020/03/03/Java%E6%A0%B8%E5%BF%8336%E8%AE%B203/"/>
    <id>https://liangdg.github.io/2020/03/03/Java核心36讲03/</id>
    <published>2020-03-03T02:05:03.000Z</published>
    <updated>2020-03-07T22:52:20.112Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java语言有很多看起来很相似，但是用途却完全不同的语言要素，这些内容往往容易成为面试官考察你知识掌握程度的切入点。&lt;br&gt;今天，我要问你的是一个经典的Java基础题目，谈谈&lt;strong&gt;final、finally、 finalize有什么不同？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>02Exception和Error有什么区别[转]</title>
    <link href="https://liangdg.github.io/2020/03/02/Java%E6%A0%B8%E5%BF%8336%E8%AE%B202/"/>
    <id>https://liangdg.github.io/2020/03/02/Java核心36讲02/</id>
    <published>2020-03-02T09:32:46.000Z</published>
    <updated>2020-03-07T23:04:19.374Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;世界上存在永远不会出错的程序吗？也许这只会出现在程序员的梦中。随着编程语言和软件的诞生，异常情况就如影随形地纠缠着我们，只有正确处理好意外情况，才能保证程序的可靠性。&lt;/p&gt;
&lt;p&gt;Java语言在设计之初就提供了相对完善的异常处理机制，这也是Java得以大行其道的原因之一，因为这种机制大大降低了编写和维护可靠程序的门槛。如今，异常处理机制已经成为现代编程语言的标配。&lt;/p&gt;
&lt;p&gt;今天我要问你的问题是，&lt;strong&gt;请对比Exception和Error，另外，运行时异常与一般异常有什么区别？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
      <category term="异常" scheme="https://liangdg.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java三种编译方式</title>
    <link href="https://liangdg.github.io/2020/03/02/Java%E4%B8%89%E7%A7%8D%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/"/>
    <id>https://liangdg.github.io/2020/03/02/Java三种编译方式/</id>
    <published>2020-03-02T09:18:06.000Z</published>
    <updated>2020-03-02T09:29:24.908Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前端编译 JIT编译 AOT编译&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础知识点" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>01谈谈你对Java平台的理解?[转]</title>
    <link href="https://liangdg.github.io/2020/03/01/Java%E6%A0%B8%E5%BF%8336%E8%AE%B201/"/>
    <id>https://liangdg.github.io/2020/03/01/Java核心36讲01/</id>
    <published>2020-03-01T07:59:01.000Z</published>
    <updated>2020-03-05T11:58:54.640Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;从你接触Java开发到现在，你对Java最直观的印象是什么呢？是它宣传的 “Write once, run anywhere”，还是目前看已经有些过于形式主义的语法呢？你对于Java平台到底了解到什么程度？请你先停下来总结思考一下。&lt;/p&gt;
&lt;p&gt;今天我要问你的问题是，&lt;strong&gt;谈谈你对Java平台的理解？“Java是解释执行”，这句话正确吗？&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础专题" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java核心36讲" scheme="https://liangdg.github.io/tags/Java%E6%A0%B8%E5%BF%8336%E8%AE%B2/"/>
    
      <category term="极客的专栏" scheme="https://liangdg.github.io/tags/%E6%9E%81%E5%AE%A2%E7%9A%84%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>java中的位运算^,&amp;,&lt;&lt;,&gt;&gt;,&lt;&lt;&lt;,&gt;&gt;&gt;[转]</title>
    <link href="https://liangdg.github.io/2020/02/29/java%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://liangdg.github.io/2020/02/29/java中的位运算/</id>
    <published>2020-02-28T16:49:52.000Z</published>
    <updated>2020-03-02T09:22:21.032Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;亦或运算-，针对二进制，相同的为0，不同的为1&quot;&gt;&lt;a href=&quot;#亦或运算-，针对二进制，相同的为0，不同的为1&quot; class=&quot;headerlink&quot; title=&quot;^(亦或运算) ，针对二进制，相同的为0，不同的为1&quot;&gt;&lt;/a&gt;^(亦或运算) ，针对二进制，相同的为0，不同的为1&lt;/h1&gt;
    
    </summary>
    
      <category term="Java" scheme="https://liangdg.github.io/categories/Java/"/>
    
      <category term="Java基础知识点" scheme="https://liangdg.github.io/categories/Java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="阅读笔记" scheme="https://liangdg.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>helloworld</title>
    <link href="https://liangdg.github.io/2019/05/23/helloworld/"/>
    <id>https://liangdg.github.io/2019/05/23/helloworld/</id>
    <published>2019-05-23T09:22:52.000Z</published>
    <updated>2020-03-01T08:10:27.980Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
